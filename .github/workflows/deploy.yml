name: Deploy to Cloud Linux

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Backend Dependencies
        run: |
          cd be
          npm install

      - name: Install Frontend Dependencies
        run: |
          cd fe
          npm install

      - name: Build Frontend
        run: |
          cd fe
          npm run build

      - name: Build Backend
        run: |
          cd be
          npm run build

      - name: Setup Database
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd be
          npm run deploy:setup

      - name: Deploy to Cloud Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 103.216.117.100
          username: root
          password: tMlB5PJbeO7%rJpJE#Wc
          port: 24700
          script: |
            # Create application directory
            sudo mkdir -p /var/www/engrisk-student-management
            cd /var/www/engrisk-student-management

            # Pull latest code
            sudo git pull origin main

            # Install dependencies
            cd be
            sudo npm install --production

            cd ../fe
            sudo npm install --production

            # Build applications
            sudo npm run build

            cd ../be
            sudo npm run build

            # Setup database with Docker (persistent)
            echo "Setting up PostgreSQL database with Docker..."
            sudo apt update
            sudo apt install -y docker.io docker-compose
            sudo systemctl start docker
            sudo systemctl enable docker

            # Check if database container already exists
            if sudo docker ps -a --format "table {{.Names}}" | grep -q "engrisk-postgres"; then
                echo "Database container already exists, starting it..."
                sudo docker start engrisk-postgres
            else
                echo "Creating new database container..."
                cd /var/www/engrisk-student-management
                sudo docker-compose -f deploy/docker-compose.database.yml up -d
            fi

            # Check container status
            echo "Checking Docker container status..."
            sudo docker ps -a | grep engrisk-postgres || echo "No engrisk-postgres container found"

            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sleep 60

            # Setup environment variables
            cat << EOF | sudo tee /var/www/engrisk-student-management/be/.env
            DATABASE_URL="postgresql://engrisk_user:EngRisk2024!SecureDB#789@localhost:5432/student_management"
            JWT_SECRET="EngRisk2024!JWTSecretKey#456!Production"
            NODE_ENV="production"
            PORT=3001
            FRONTEND_URL="https://msjenny.io.vn"
            API_PREFIX="api/v1"
            EOF

            # Also update for fallback PostgreSQL
            echo "Updating PostgreSQL configuration for fallback..."
            sudo -u postgres psql -c "ALTER USER engrisk_user PASSWORD 'EngRisk2024!SecureDB#789';" || true

            # Setup database using custom script
            cd be
            echo "Setting up database..."

            # Try custom script first
            if sudo npm run deploy:setup; then
                echo "✅ Database setup completed successfully"
            else
                echo "❌ Custom database setup failed, trying fallback..."
                
                # Fallback: Install PostgreSQL directly
                sudo apt install -y postgresql postgresql-contrib
                sudo systemctl start postgresql
                sudo systemctl enable postgresql
                
                # Create database and user
                sudo -u postgres psql -c "CREATE DATABASE student_management;" || true
                sudo -u postgres psql -c "CREATE USER engrisk_user WITH PASSWORD 'EngRisk2024!SecureDB#789';" || true
                sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE student_management TO engrisk_user;" || true
                
                # Run migration
                sudo npm run prisma:deploy || echo "Migration failed, but continuing..."
                
                # Seed data
                sudo npm run seed || echo "Seed failed, but continuing..."
            fi

            # Setup frontend service
            sudo cp /var/www/engrisk-student-management/deploy/engrisk-frontend.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable engrisk-frontend
            sudo systemctl start engrisk-frontend

            # Restart services
            sudo systemctl restart engrisk-backend
            sudo systemctl restart nginx

            echo "Deployment completed successfully!"

      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.APP_URL }}/api/v1/health || exit 1
