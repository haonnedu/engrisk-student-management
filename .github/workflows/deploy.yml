name: Docker Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./be
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./fe
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./deploy/nginx
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-nginx:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            # Create application directory
            sudo mkdir -p /var/www/engrisk-student-management
            cd /var/www/engrisk-student-management

            # Clone or pull latest code
            if [ -d ".git" ]; then
                echo "Repository exists, pulling latest code..."
                sudo git pull origin main
            else
                echo "Cloning repository..."
                sudo git clone https://github.com/haonnedu/engrisk-student-management.git .
            fi

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            echo "Pulling latest Docker images..."
            sudo docker pull ghcr.io/${{ github.repository }}-backend:${{ github.sha }}
            sudo docker pull ghcr.io/${{ github.repository }}-frontend:${{ github.sha }}
            sudo docker pull ghcr.io/${{ github.repository }}-nginx:${{ github.sha }}

            # Stop existing containers
            echo "Stopping existing containers..."
            sudo docker-compose -f docker-compose.prod.yml down || true

            # Create network if not exists
            sudo docker network create engrisk-network || true

            # Start database if not running
            if ! sudo docker ps --format "table {{.Names}}" | grep -q "esm_postgres"; then
                echo "Starting database container..."
                sudo docker run -d \
                  --name esm_postgres \
                  --network engrisk-network \
                  -e POSTGRES_DB=student_management \
                  -e POSTGRES_USER=engrisk_user \
                  -e POSTGRES_PASSWORD=EngRisk2024!SecureDB#789 \
                  -p 5432:5432 \
                  postgres:15-alpine
                sleep 15
            fi

            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sudo docker exec esm_postgres pg_isready -U engrisk_user -d student_management || sleep 10

            # Run database migrations
            echo "Running database migrations..."
            sudo docker run --rm --network engrisk-network \
              -e DATABASE_URL="postgresql://engrisk_user:EngRisk2024!SecureDB%23789@esm_postgres:5432/student_management" \
              ghcr.io/${{ github.repository }}-backend:${{ github.sha }} \
              npx prisma migrate deploy

            # Start application stack manually
            echo "Starting application stack..."

            # Stop existing containers
            sudo docker stop engrisk-backend engrisk-frontend engrisk-nginx || true
            sudo docker rm engrisk-backend engrisk-frontend engrisk-nginx || true

            # Start backend
            echo "Starting backend container..."
            sudo docker run -d \
              --name engrisk-backend \
              --network engrisk-network \
              -e DATABASE_URL="postgresql://engrisk_user:EngRisk2024!SecureDB%23789@esm_postgres:5432/student_management" \
              -e JWT_SECRET="EngRisk2024!JWTSecretKey#456!Production" \
              -e NODE_ENV=production \
              -e PORT=3001 \
              -e FRONTEND_URL="https://msjenny.io.vn" \
              -e API_PREFIX="api/v1" \
              -p 3001:3001 \
              ghcr.io/${{ github.repository }}-backend:${{ github.sha }}

            # Start frontend
            echo "Starting frontend container..."
            sudo docker run -d \
              --name engrisk-frontend \
              --network engrisk-network \
              -e NODE_ENV=production \
              -e PORT=3000 \
              -e NEXT_PUBLIC_API_URL="https://msjenny.io.vn/api/v1" \
              -p 3000:3000 \
              ghcr.io/${{ github.repository }}-frontend:${{ github.sha }} || echo "Frontend container failed to start"

            # Check frontend container status
            echo "Checking frontend container status..."
            sudo docker ps | grep frontend || echo "Frontend container not running"
            sudo docker logs engrisk-frontend || echo "No frontend logs available"

            # Create nginx configuration
            echo "Creating nginx configuration..."
            sudo mkdir -p /var/www/engrisk-student-management/nginx-config
            sudo cp /dev/null /var/www/engrisk-student-management/nginx-config/nginx.conf
            echo "events { worker_connections 1024; }" | sudo tee -a /var/www/engrisk-student-management/nginx-config/nginx.conf
            echo "http { upstream backend { server engrisk-backend:3001; } upstream frontend { server engrisk-frontend:3000; } server { listen 80; server_name msjenny.io.vn www.msjenny.io.vn; location /api/ { proxy_pass http://backend; proxy_http_version 1.1; proxy_set_header Upgrade \$http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host \$host; proxy_set_header X-Real-IP \$remote_addr; proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \$scheme; proxy_cache_bypass \$http_upgrade; } location / { proxy_pass http://frontend; proxy_http_version 1.1; proxy_set_header Upgrade \$http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host \$host; proxy_set_header X-Real-IP \$remote_addr; proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \$scheme; proxy_cache_bypass \$http_upgrade; } } }" | sudo tee -a /var/www/engrisk-student-management/nginx-config/nginx.conf

            # Start nginx
            echo "Starting nginx container..."
            sudo docker run -d \
              --name engrisk-nginx \
              --network engrisk-network \
              -p 80:80 \
              -p 443:443 \
              -v /var/www/engrisk-student-management/nginx-config/nginx.conf:/etc/nginx/nginx.conf:ro \
              nginx:alpine

            # Wait for services to be ready
            echo "Waiting for services to be ready..."
            sleep 30

            # Health check
            echo "Running health checks..."
            if curl -f http://localhost/api/v1/health; then
                echo "✅ Backend is healthy"
            else
                echo "❌ Backend health check failed"
            fi

            if curl -f http://localhost/; then
                echo "✅ Frontend is healthy"
            else
                echo "❌ Frontend health check failed"
            fi

            # Clean up old images
            echo "Cleaning up old images..."
            sudo docker image prune -f

            echo "Deployment completed successfully!"

      - name: Production Health Check
        run: |
          sleep 60
          echo "Testing production endpoints..."
          curl -f https://msjenny.io.vn/api/v1/health || echo "Backend health check failed"
          curl -f https://msjenny.io.vn/ || echo "Frontend health check failed"
