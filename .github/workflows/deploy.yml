name: Docker Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: prod-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - name: backend
            context: ./be
          - name: frontend
            context: ./fe
          - name: nginx
            context: ./deploy/nginx

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.name }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push ${{ matrix.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Limit build resources to avoid "no space left on device" errors
          platforms: linux/amd64
          no-cache-filter: ""

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout (compose/nginx.conf)
        uses: actions/checkout@v4

      - name: Copy compose & nginx.conf to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          source: deploy/** 
          target: /var/www/engrisk-student-management

      - name: Deploy via SSH (compose pull/up)
        uses: appleboy/ssh-action@v1.0.0
        env:                              # ⬅️ đưa secrets/vars vào môi trường của runner
          TAG: ${{ github.sha }}          # truyền TAG từ GitHub vào
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          envs: TAG,DB_USER,DB_PASSWORD,JWT_SECRET,REGISTRY,IMAGE_NAME
          script_stop: true
          script: |
            set -Eeuo pipefail
            
            # Function to show all logs on error
            show_all_logs() {
              echo "════════════════════════════════════════"
              echo "❌ DEPLOYMENT FAILED - Showing all logs:"
              echo "════════════════════════════════════════"
              cd /var/www/engrisk-student-management
              COMPOSE_FILE="docker-compose.prod.yml"
              [ -f "deploy/docker-compose.prod.yml" ] && COMPOSE_FILE="deploy/docker-compose.prod.yml"
              
              echo "--- Container Status ---"
              docker compose -f "$COMPOSE_FILE" ps -a || docker ps -a
              
              echo "--- Backend Logs ---"
              docker compose -f "$COMPOSE_FILE" logs --tail=100 backend 2>&1 || docker logs engrisk-backend --tail=100 2>&1 || echo "No backend logs"
              
              echo "--- Frontend Logs ---"
              docker compose -f "$COMPOSE_FILE" logs --tail=50 frontend 2>&1 || docker logs engrisk-frontend --tail=50 2>&1 || echo "No frontend logs"
              
              echo "--- Nginx Logs ---"
              docker compose -f "$COMPOSE_FILE" logs --tail=50 nginx 2>&1 || docker logs engrisk-nginx --tail=50 2>&1 || echo "No nginx logs"
              
              echo "--- Database Logs ---"
              docker compose -f "$COMPOSE_FILE" logs --tail=30 db 2>&1 || docker logs esm_postgres --tail=30 2>&1 || echo "No db logs"
            }
            
            # Trap any error and show logs
            trap 'show_all_logs' ERR
            APP_DIR=/var/www/engrisk-student-management
            DOMAIN=msjenny.io.vn
      
            echo "Using TAG=$TAG, DB_USER=$DB_USER, IMAGE_NAME=$IMAGE_NAME"
            mkdir -p "$APP_DIR" "$APP_DIR/nginx-config"
            cd "$APP_DIR"
      
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login "$REGISTRY" -u "${{ github.actor }}" --password-stdin
      
            umask 177
            cat > .env <<ENV
            TAG=${TAG}
            DOMAIN=${DOMAIN}
            
            # DB
            POSTGRES_DB=student_management
            POSTGRES_USER=${DB_USER}
            POSTGRES_PASSWORD=${DB_PASSWORD}
            DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@esm_postgres:5432/student_management
            
            # JWT
            JWT_SECRET=${JWT_SECRET}
            JWT_EXPIRES_IN=24h
            
            # Backend
            NODE_ENV=production
            PORT_BE=3001
            FRONTEND_URL=https://${DOMAIN}
            API_PREFIX=api/v1
            
            # Frontend
            PORT_FE=3000
            NEXT_PUBLIC_API_URL=https://${DOMAIN}/api/v1
            ENV
            
                  chmod 600 .env
      
            COMPOSE_FILE="docker-compose.prod.yml"
            if [ ! -f "$COMPOSE_FILE" ] && [ -f "deploy/docker-compose.prod.yml" ]; then
              COMPOSE_FILE="deploy/docker-compose.prod.yml"
            fi
            echo "✓ Using compose file: $COMPOSE_FILE"
      
            # Create network and volume if they don't exist
            echo "→ Checking network and volume..."
            docker network inspect engrisk-network >/dev/null 2>&1 || docker network create engrisk-network
            docker volume inspect postgres_data >/dev/null 2>&1 || docker volume create postgres_data
            echo "✓ Network and volume ready"
      
            # Start database if it's stopped, or create if not exists
            if docker ps -a --format '{{.Names}}' | grep -q '^esm_postgres$'; then
              echo "→ Database container exists, ensuring it's running..."
              docker start esm_postgres || true
              sleep 3
            fi
      
            # Stop and remove old app containers only (keep database running)
            echo "→ Stopping old app containers..."
            docker compose -f "$COMPOSE_FILE" --env-file .env stop backend frontend nginx 2>&1 || true
            docker compose -f "$COMPOSE_FILE" --env-file .env rm -f backend frontend nginx 2>&1 || true
            echo "✓ Old containers removed"
      
            echo "→ Pulling new images..."
            docker compose -f "$COMPOSE_FILE" --env-file .env pull backend frontend nginx
            echo "✓ Images pulled"
      
            echo "→ Starting containers..."
            docker compose -f "$COMPOSE_FILE" --env-file .env up -d
            
            echo "→ Checking container status..."
            docker compose -f "$COMPOSE_FILE" ps
            
            echo "→ Waiting for services to be ready..."
            sleep 12
            
            echo "→ Testing backend health..."
            curl -fsS -k "https://${DOMAIN}/api/v1/health" >/dev/null || {
              echo "❌ Backend health check failed!"
              docker compose -f "$COMPOSE_FILE" logs --tail=200 backend
              exit 1
            }
            echo "✓ Backend is healthy"
            
            echo "→ Testing frontend..."
            curl -fsS -k "https://${DOMAIN}/" >/dev/null || {
              echo "❌ Frontend health check failed!"
              docker compose -f "$COMPOSE_FILE" logs --tail=100 nginx
              docker compose -f "$COMPOSE_FILE" logs --tail=100 frontend
              exit 1
            }
            echo "✓ Frontend is healthy"
            
            echo ""
            echo "════════════════════════════════════════"
            echo "✓ DEPLOYMENT SUCCESSFUL!"
            echo "════════════════════════════════════════"
            echo "→ Running containers:"
            docker compose -f "$COMPOSE_FILE" ps
            echo ""
            echo "→ Deployed version: $TAG"
            echo "→ Site: https://${DOMAIN}"
            echo "→ API Health: https://${DOMAIN}/api/v1/health"
            
            # Clean up old unused images to save disk space
            echo ""
            echo "→ Cleaning up old Docker images..."
            docker image prune -af --filter "label!=keep" --filter "until=24h" || true
            echo "✓ Cleanup complete"

      - name: Production Health Check (external)
        run: |
          sleep 20
          curl -f -k https://msjenny.io.vn/api/v1/health
          curl -f -k https://msjenny.io.vn/
