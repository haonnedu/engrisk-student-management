/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User registration */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all students */
        get: operations["StudentsController_findAll"];
        put?: never;
        /** Create a new student */
        post: operations["StudentsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/students/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a student by ID */
        get: operations["StudentsController_findOne"];
        put?: never;
        post?: never;
        /** Delete a student */
        delete: operations["StudentsController_remove"];
        options?: never;
        head?: never;
        /** Update a student */
        patch: operations["StudentsController_update"];
        trace?: never;
    };
    "/api/v1/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CoursesController_findAll"];
        put?: never;
        /** Create a new course */
        post: operations["CoursesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CoursesController_findOne"];
        put?: never;
        post?: never;
        /** Delete a course */
        delete: operations["CoursesController_remove"];
        options?: never;
        head?: never;
        /** Update a course */
        patch: operations["CoursesController_update"];
        trace?: never;
    };
    "/api/v1/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EnrollmentsController_findAll"];
        put?: never;
        /** Create enrollment */
        post: operations["EnrollmentsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/enrollments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EnrollmentsController_findOne"];
        put?: never;
        post?: never;
        delete: operations["EnrollmentsController_remove"];
        options?: never;
        head?: never;
        patch: operations["EnrollmentsController_update"];
        trace?: never;
    };
    "/api/v1/grades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GradesController_findAll"];
        put?: never;
        /** Create grade */
        post: operations["GradesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/grades/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GradesController_findOne"];
        put?: never;
        post?: never;
        delete: operations["GradesController_remove"];
        options?: never;
        head?: never;
        patch: operations["GradesController_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginDto: {
            /**
             * @description User email address or phone number
             * @example admin@example.com or +84123456789
             */
            emailOrPhone: string;
            /**
             * @description User password
             * @example password123
             */
            password: string;
        };
        RegisterDto: {
            /**
             * @description User email address
             * @example student@example.com
             */
            email?: string;
            /**
             * @description User password
             * @example password123
             */
            password: string;
            /**
             * @description First name
             * @example John
             */
            firstName: string;
            /**
             * @description Last name
             * @example Doe
             */
            lastName: string;
            /**
             * @description Eng name
             * @example John
             */
            engName: string;
            /**
             * @description User role
             * @default STUDENT
             * @enum {string}
             */
            role: "STUDENT" | "ADMIN" | "SUPER_ADMIN";
            /**
             * Format: date-time
             * @description Date of birth (for students)
             * @example 1995-01-15
             */
            dateOfBirth?: string;
            /**
             * @description Phone number
             * @example +1234567890
             */
            phone?: string;
            /**
             * @description Address
             * @example 123 Main St, City, State
             */
            address?: string;
            /**
             * @description Position (for admin users)
             * @example Academic Coordinator
             */
            position?: string;
        };
        CreateStudentDto: {
            /**
             * @description Existing User ID to associate with this student (optional). If omitted, a new user will be created automatically with default password 123456.
             * @example clx1234567890
             */
            userId?: string;
            /**
             * @description Student first name
             * @example John
             */
            firstName: string;
            /**
             * @description Student last name
             * @example Doe
             */
            lastName: string;
            /**
             * @description Student eng name
             * @example John
             */
            engName: string;
            /**
             * Format: date-time
             * @description Date of birth
             * @example 1995-01-15
             */
            dateOfBirth: string;
            /**
             * @description Phone number
             * @example +1234567890
             */
            phone?: string;
            /**
             * @description Address
             * @example 123 Main St, City, State
             */
            address?: string;
            /**
             * @description Emergency contact information
             * @example Jane Doe - +0987654321
             */
            emergencyContact?: string;
            /**
             * @description Student status
             * @default ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "INACTIVE" | "GRADUATED" | "SUSPENDED";
        };
        UpdateStudentDto: {
            /**
             * @description Existing User ID to associate with this student (optional). If omitted, a new user will be created automatically with default password 123456.
             * @example clx1234567890
             */
            userId?: string;
            /**
             * @description Student first name
             * @example John
             */
            firstName?: string;
            /**
             * @description Student last name
             * @example Doe
             */
            lastName?: string;
            /**
             * @description Student eng name
             * @example John
             */
            engName?: string;
            /**
             * Format: date-time
             * @description Date of birth
             * @example 1995-01-15
             */
            dateOfBirth?: string;
            /**
             * @description Phone number
             * @example +1234567890
             */
            phone?: string;
            /**
             * @description Address
             * @example 123 Main St, City, State
             */
            address?: string;
            /**
             * @description Emergency contact information
             * @example Jane Doe - +0987654321
             */
            emergencyContact?: string;
            /**
             * @description Student status
             * @default ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "INACTIVE" | "GRADUATED" | "SUSPENDED";
        };
        CreateCourseDto: {
            /**
             * @description Unique course code
             * @example CS101
             */
            courseCode: string;
            /**
             * @description Course title
             * @example Introduction to Computer Science
             */
            title: string;
            /** @description Course description */
            description?: string;
            /**
             * @description Course credits
             * @example 3
             */
            credits: number;
            /**
             * @description Duration in weeks
             * @example 12
             */
            duration: number;
            /**
             * @description Maximum number of students
             * @example 40
             */
            maxStudents?: number;
            /**
             * @description Course status
             * @enum {string}
             */
            status?: "ACTIVE" | "INACTIVE" | "ARCHIVED";
        };
        UpdateCourseDto: {
            /**
             * @description Unique course code
             * @example CS101
             */
            courseCode?: string;
            /**
             * @description Course title
             * @example Introduction to Computer Science
             */
            title?: string;
            /** @description Course description */
            description?: string;
            /**
             * @description Course credits
             * @example 3
             */
            credits?: number;
            /**
             * @description Duration in weeks
             * @example 12
             */
            duration?: number;
            /**
             * @description Maximum number of students
             * @example 40
             */
            maxStudents?: number;
            /**
             * @description Course status
             * @enum {string}
             */
            status?: "ACTIVE" | "INACTIVE" | "ARCHIVED";
        };
        CreateEnrollmentDto: {
            /**
             * @description Student ID
             * @example clx_student_1
             */
            studentId: string;
            /**
             * @description Course ID
             * @example clx_course_1
             */
            courseId: string;
            /**
             * @description Enrollment status
             * @enum {string}
             */
            status?: "ENROLLED" | "COMPLETED" | "DROPPED" | "FAILED";
        };
        UpdateEnrollmentDto: {
            /**
             * @description Student ID
             * @example clx_student_1
             */
            studentId?: string;
            /**
             * @description Course ID
             * @example clx_course_1
             */
            courseId?: string;
            /**
             * @description Enrollment status
             * @enum {string}
             */
            status?: "ENROLLED" | "COMPLETED" | "DROPPED" | "FAILED";
        };
        CreateGradeDto: {
            /** @description Student ID */
            studentId: string;
            /** @description Course ID */
            courseId: string;
            /**
             * @description Grade value (0-100)
             * @example 85
             */
            grade: number;
            /**
             * @description Type of grade
             * @enum {string}
             */
            gradeType: "ASSIGNMENT" | "QUIZ" | "MIDTERM" | "FINAL" | "PROJECT";
            /** @description Optional comments */
            comments?: string;
        };
        UpdateGradeDto: {
            /** @description Student ID */
            studentId?: string;
            /** @description Course ID */
            courseId?: string;
            /**
             * @description Grade value (0-100)
             * @example 85
             */
            grade?: number;
            /**
             * @description Type of grade
             * @enum {string}
             */
            gradeType?: "ASSIGNMENT" | "QUIZ" | "MIDTERM" | "FINAL" | "PROJECT";
            /** @description Optional comments */
            comments?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_findAll: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                status?: "ACTIVE" | "INACTIVE" | "GRADUATED" | "SUSPENDED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Students retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStudentDto"];
            };
        };
        responses: {
            /** @description Student created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Student retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Student not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Student deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Student not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StudentsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStudentDto"];
            };
        };
        responses: {
            /** @description Student updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Student not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCourseDto"];
            };
        };
        responses: {
            /** @description Course created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CoursesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCourseDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEnrollmentDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EnrollmentsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEnrollmentDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GradesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GradesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGradeDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GradesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GradesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GradesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGradeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
