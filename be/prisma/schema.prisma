// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student Student?
  admin   Admin?

  @@map("users")
}

model Student {
  id           String   @id @default(cuid())
  userId       String   @unique
  studentId    String   @unique // Student ID number
  firstName    String
  lastName     String
  dateOfBirth  DateTime
  phone        String?
  address      String?
  emergencyContact String?
  enrollmentDate DateTime @default(now())
  status       StudentStatus @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  grades      Grade[]

  @@map("students")
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String
  lastName  String
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Course {
  id          String   @id @default(cuid())
  courseCode  String   @unique
  title       String
  description String?
  credits     Int
  duration    Int      // Duration in weeks
  maxStudents Int      @default(30)
  status      CourseStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  grades      Grade[]

  @@map("courses")
}

model Enrollment {
  id           String   @id @default(cuid())
  studentId    String
  courseId     String
  enrolledAt   DateTime @default(now())
  status       EnrollmentStatus @default(ENROLLED)
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Grade {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  grade     Float    // Grade value (0-100)
  gradeType GradeType
  comments  String?
  gradedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("grades")
}

// Enums
enum UserRole {
  STUDENT
  ADMIN
  SUPER_ADMIN
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  SUSPENDED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  DROPPED
  FAILED
}

enum GradeType {
  ASSIGNMENT
  QUIZ
  MIDTERM
  FINAL
  PROJECT
}
