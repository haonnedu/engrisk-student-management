generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  phone     String?  @unique
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
  student   Student?
  teacher   Teacher?
  @@map("users")
}

model Student {
  id               String            @id @default(cuid())
  userId           String            @unique
  studentId        String            @unique
  firstName        String
  engName          String
  lastName         String
  dateOfBirth      DateTime
  phone            String?
  address          String?
  emergencyContact String?
  classSchool      String?
  enrollmentDate   DateTime          @default(now())
  status           StudentStatus     @default(ACTIVE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  assessmentScores AssessmentScore[]
  attendance       Attendance[]
  enrollments      Enrollment[]
  grades           Grade[]
  homework         Homework[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String
  lastName  String
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Teacher {
  id         String      @id @default(cuid())
  firstName  String
  lastName   String
  phone      String?
  address    String?
  position   String?
  status     TeacherStatus @default(ACTIVE)
  userId     String?     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  timesheets Timesheet[]

  @@map("teachers")
}

model Timesheet {
  id          String          @id @default(cuid())
  teacherId   String
  date        DateTime
  hoursWorked Float
  minutesWorked Int           @default(0)
  description String?
  status      TimesheetStatus @default(DRAFT)
  submittedAt DateTime?
  approvedAt  DateTime?
  approvedBy  String?
  rejectedAt  DateTime?
  rejectionReason String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  teacher     Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, date])
  @@map("timesheets")
}

model Course {
  id          String         @id @default(cuid())
  courseCode  String         @unique
  title       String
  description String?
  credits     Int
  duration    Int
  maxStudents Int            @default(30)
  status      CourseStatus   @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sections    ClassSection[]
  enrollments Enrollment[]
  grades      Grade[]

  @@map("courses")
}

model Enrollment {
  id          String           @id @default(cuid())
  studentId   String
  courseId    String
  sectionId   String?
  enrolledAt  DateTime         @default(now())
  status      EnrollmentStatus @default(ENROLLED)
  completedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  section     ClassSection?    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Grade {
  id          String    @id @default(cuid())
  studentId   String
  courseId    String
  gradeTypeId String
  grade       Float
  comments    String?
  gradedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  gradeType   GradeType @relation(fields: [gradeTypeId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("grades")
}

model ClassSection {
  id              String       @id @default(cuid())
  name            String
  code            String       @unique
  timeDescription String?
  day1            Int?
  day2            Int?
  teacherName     String?
  book            String?
  courseId        String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  assessments     Assessment[]
  attendance      Attendance[]
  course          Course?      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollments     Enrollment[]
  homework        Homework[]

  @@map("class_sections")
}

model Assessment {
  id        String            @id @default(cuid())
  sectionId String
  code      String
  label     String
  maxScore  Int               @default(10)
  weight    Float             @default(1)
  order     Int               @default(0)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  scores    AssessmentScore[]
  section   ClassSection      @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, code])
  @@map("assessments")
}

model AssessmentScore {
  id           String     @id @default(cuid())
  assessmentId String
  studentId    String
  score        Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, studentId])
  @@map("assessment_scores")
}

model Attendance {
  id        String           @id @default(cuid())
  sectionId String
  studentId String
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  section   ClassSection     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([sectionId, studentId, date])
  @@map("attendance")
}

model Homework {
  id          String       @id @default(cuid())
  studentId   String
  sectionId   String
  title       String
  description String?
  points      Float
  maxPoints   Float        @default(100)
  dueDate     DateTime?
  submittedAt DateTime     @default(now())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  section     ClassSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  student     Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("homework")
}

model GradeType {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  weight      Float    @default(1.0)
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  grades      Grade[]

  @@map("grade_types")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  SUPER_ADMIN
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  SUSPENDED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  DROPPED
  FAILED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}


enum TeacherStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  RETIRED
}

enum TimesheetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}